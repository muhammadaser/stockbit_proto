// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package movie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RouteMovieClient is the client API for RouteMovie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteMovieClient interface {
	GetMovies(ctx context.Context, in *MovieParams, opts ...grpc.CallOption) (*MoviesRes, error)
	GetMovie(ctx context.Context, in *SingleMovieParams, opts ...grpc.CallOption) (*Movie, error)
}

type routeMovieClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteMovieClient(cc grpc.ClientConnInterface) RouteMovieClient {
	return &routeMovieClient{cc}
}

func (c *routeMovieClient) GetMovies(ctx context.Context, in *MovieParams, opts ...grpc.CallOption) (*MoviesRes, error) {
	out := new(MoviesRes)
	err := c.cc.Invoke(ctx, "/movie.RouteMovie/GetMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeMovieClient) GetMovie(ctx context.Context, in *SingleMovieParams, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/movie.RouteMovie/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteMovieServer is the server API for RouteMovie service.
// All implementations must embed UnimplementedRouteMovieServer
// for forward compatibility
type RouteMovieServer interface {
	GetMovies(context.Context, *MovieParams) (*MoviesRes, error)
	GetMovie(context.Context, *SingleMovieParams) (*Movie, error)
	mustEmbedUnimplementedRouteMovieServer()
}

// UnimplementedRouteMovieServer must be embedded to have forward compatible implementations.
type UnimplementedRouteMovieServer struct {
}

func (UnimplementedRouteMovieServer) GetMovies(context.Context, *MovieParams) (*MoviesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedRouteMovieServer) GetMovie(context.Context, *SingleMovieParams) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedRouteMovieServer) mustEmbedUnimplementedRouteMovieServer() {}

// UnsafeRouteMovieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteMovieServer will
// result in compilation errors.
type UnsafeRouteMovieServer interface {
	mustEmbedUnimplementedRouteMovieServer()
}

func RegisterRouteMovieServer(s grpc.ServiceRegistrar, srv RouteMovieServer) {
	s.RegisterService(&_RouteMovie_serviceDesc, srv)
}

func _RouteMovie_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteMovieServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.RouteMovie/GetMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteMovieServer).GetMovies(ctx, req.(*MovieParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteMovie_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMovieParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteMovieServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.RouteMovie/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteMovieServer).GetMovie(ctx, req.(*SingleMovieParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteMovie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "movie.RouteMovie",
	HandlerType: (*RouteMovieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovies",
			Handler:    _RouteMovie_GetMovies_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _RouteMovie_GetMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie/movie.proto",
}
